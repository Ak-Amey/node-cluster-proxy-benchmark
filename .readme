# Node.js Microservices & Monolithic Architecture Benchmark

## Project Overview

This project demonstrates **monolithic vs microservices architecture** in Node.js using **Express**, **cluster mode**, and **API proxying**. It includes a **stress testing setup** to benchmark performance using `autocannon`.

- **Microservices architecture:** Applications are built as a collection of small, independent services communicating over APIs. Each service handles a specific function and can be developed, deployed, and scaled independently.
- **Monolithic architecture:** Applications are built as a single unit where all components (UI, business logic, data access) are tightly coupled. Easier to start but less flexible for scaling or updates.

The **motive** of this project is to understand the difference in scalability and performance between monolithic and microservices architectures, and to demonstrate the use of Node.js clusters, proxying, and request logging in a real-world scenario.

---

## Installed Packages & Use Cases

| Package                      | Purpose / Use Case                                                                   |
| ---------------------------- | ------------------------------------------------------------------------------------ |
| **express**                  | Web framework to create RESTful APIs and servers.                                    |
| **morgan**                   | HTTP request logger middleware; logs incoming requests for debugging and monitoring. |
| **express-http-proxy**       | Middleware to forward requests from a gateway server to backend services.            |
| **autocannon**               | Command-line tool for stress testing HTTP servers by generating high-load requests.  |
| **nodemon (dev dependency)** | Automatically restarts server on code changes during development.                    |
